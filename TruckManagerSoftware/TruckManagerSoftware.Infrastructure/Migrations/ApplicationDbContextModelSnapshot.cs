// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TruckManagerSoftware.Infrastructure.Data;

#nullable disable

namespace TruckManagerSoftware.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.BankContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("BankContacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0b0dc9a-5826-4dfd-9aa4-cad5a902268b"),
                            Email = "unicredit@unicredit.com",
                            Name = "Unicredi Bulbank",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("bfd81dcf-f66a-4e88-a534-7b58ba4681b6"),
                            Email = "dsk@dsk.com",
                            Name = "DSK",
                            PhoneNumber = "0123456789"
                        });
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.Engine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PowerHp")
                        .HasColumnType("int");

                    b.Property<int>("PowerKw")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TorqueNm")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Engines");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f02705e-b364-4a2d-8b7a-734458317e5d"),
                            PowerHp = 360,
                            PowerKw = 265,
                            Title = "DC13 114 360 Euro 5",
                            TorqueNm = 1850
                        },
                        new
                        {
                            Id = new Guid("682f1317-f1d8-46c4-b7ec-13af1ee27906"),
                            PowerHp = 560,
                            PowerKw = 412,
                            Title = "DC16 18 560 Euro 5 V8",
                            TorqueNm = 2700
                        },
                        new
                        {
                            Id = new Guid("57677635-5723-437d-8a94-3d26f51cd0f8"),
                            PowerHp = 580,
                            PowerKw = 427,
                            Title = "DC16 102 580 Euro 6 V8",
                            TorqueNm = 2950
                        });
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.Garage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Garages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1945cc7-f084-4c9c-b0a1-0e7824d6bc9b"),
                            City = "Ruse",
                            Country = "Bulgaria",
                            Size = "small"
                        },
                        new
                        {
                            Id = new Guid("16d31ab1-2b09-44a0-ae5e-0c1526078157"),
                            City = "Venice",
                            Country = "Italy",
                            Size = "medium"
                        },
                        new
                        {
                            Id = new Guid("c17a0f07-e39c-4420-a338-3f7b15a15f59"),
                            City = "Berlin",
                            Country = "Germany",
                            Size = "large"
                        },
                        new
                        {
                            Id = new Guid("54779e9a-eb54-491a-b442-78dcff15462f"),
                            City = "Varna",
                            Country = "Bulgaria",
                            Size = "large"
                        },
                        new
                        {
                            Id = new Guid("58197c1b-2059-4382-a956-aecb0d834217"),
                            City = "Burgas",
                            Country = "Bulgaria",
                            Size = "large"
                        });
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("CargoWeight")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryPrice")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("EndPoint")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("StartPoint")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TripDistance")
                        .HasColumnType("int");

                    b.Property<string>("TripTime")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("TruckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5ccb7fe1-1c13-4dd0-8dec-12867917581c"),
                            Cargo = "Beans",
                            CargoWeight = 12,
                            DeliveryPrice = 95493,
                            DeliveryType = "urgent",
                            EndPoint = "Grimsby",
                            StartPoint = "Bratislava",
                            TripDistance = 1824,
                            TripTime = "26h 12m"
                        },
                        new
                        {
                            Id = new Guid("3496d7fc-c71a-43e6-b1bf-cf4c4082feac"),
                            Cargo = "Oil",
                            CargoWeight = 23,
                            DeliveryPrice = 32273,
                            DeliveryType = "important",
                            EndPoint = "Mannheim",
                            StartPoint = "Vienna",
                            TripDistance = 1045,
                            TripTime = "15h 18m"
                        },
                        new
                        {
                            Id = new Guid("432f8be9-b405-4cce-a090-df244c49beda"),
                            Cargo = "Pesto",
                            CargoWeight = 18,
                            DeliveryPrice = 28663,
                            DeliveryType = "standard",
                            EndPoint = "Frankfurt",
                            StartPoint = "Dresden",
                            TripDistance = 864,
                            TripTime = "12h 40m"
                        });
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.Trailer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AxleCount")
                        .HasColumnType("int");

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CargoTypes")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<Guid?>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("TareWeight")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("TotalLength")
                        .HasColumnType("float");

                    b.Property<string>("TrailerType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("TruckId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GarageId");

                    b.ToTable("Trailers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ce51feb-0d77-4f61-aeb0-c44a4b0540d3"),
                            AxleCount = 2,
                            BodyType = "Flatbed",
                            CargoTypes = "Construction equipment and materials",
                            GarageId = new Guid("e1945cc7-f084-4c9c-b0a1-0e7824d6bc9b"),
                            Series = "FLB",
                            TareWeight = 5300,
                            Title = "Wooden Floor Flatbed",
                            TotalLength = 13.699999999999999,
                            TrailerType = "Single"
                        },
                        new
                        {
                            Id = new Guid("3c7e1a88-4c69-46c2-915f-3763f97c7fe5"),
                            AxleCount = 3,
                            BodyType = "Container Carrier",
                            CargoTypes = "Containers and container tanks",
                            GarageId = new Guid("16d31ab1-2b09-44a0-ae5e-0c1526078157"),
                            Series = "CNT",
                            TareWeight = 5100,
                            Title = "Container Carrier",
                            TotalLength = 12.4,
                            TrailerType = "Single"
                        },
                        new
                        {
                            Id = new Guid("928604bb-8f63-4b15-8bb6-fda54428c3a8"),
                            AxleCount = 2,
                            BodyType = "Curtainsider",
                            CargoTypes = "General, Dry goods",
                            GarageId = new Guid("c17a0f07-e39c-4420-a338-3f7b15a15f59"),
                            Series = "STD",
                            TareWeight = 5860,
                            Title = "Curtainsider",
                            TotalLength = 13.699999999999999,
                            TrailerType = "single"
                        },
                        new
                        {
                            Id = new Guid("35328ace-d3cb-4208-8e48-358eb5905ae1"),
                            AxleCount = 3,
                            BodyType = "Dumper",
                            CargoTypes = "Bulk cargo and materials",
                            GarageId = new Guid("54779e9a-eb54-491a-b442-78dcff15462f"),
                            Series = "DMP",
                            TareWeight = 6650,
                            Title = "Steel Dumper",
                            TotalLength = 9.0999999999999996,
                            TrailerType = "Single"
                        });
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.Transmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GearsCount")
                        .HasColumnType("int");

                    b.Property<bool>("Retarder")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Transmissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1663ec8-2b8c-4782-910c-435081921fac"),
                            GearsCount = 12,
                            Retarder = false,
                            Title = "Opticruise GRS 905"
                        },
                        new
                        {
                            Id = new Guid("b5f61d07-9576-491a-a337-809a31268a17"),
                            GearsCount = 14,
                            Retarder = false,
                            Title = "Opticruise GRSO 925"
                        },
                        new
                        {
                            Id = new Guid("e71a4b60-1ed1-4982-b900-70a76f0706a8"),
                            GearsCount = 14,
                            Retarder = true,
                            Title = "Opticruise GRSO 925R"
                        });
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.Truck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("DrivenDistance")
                        .HasColumnType("float");

                    b.Property<Guid?>("EngineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("TrailerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TransmissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EngineId");

                    b.HasIndex("GarageId");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.HasIndex("TrailerId")
                        .IsUnique()
                        .HasFilter("[TrailerId] IS NOT NULL");

                    b.HasIndex("TransmissionId");

                    b.ToTable("Trucks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d380a02-1932-4c39-b2d6-cd58678fd442"),
                            Brand = "Scania",
                            DrivenDistance = 1500.0,
                            EngineId = new Guid("7f02705e-b364-4a2d-8b7a-734458317e5d"),
                            GarageId = new Guid("e1945cc7-f084-4c9c-b0a1-0e7824d6bc9b"),
                            Series = "R",
                            TransmissionId = new Guid("e1663ec8-2b8c-4782-910c-435081921fac")
                        },
                        new
                        {
                            Id = new Guid("6a647b36-271f-4434-a152-2548f8a2ff0e"),
                            Brand = "DAF",
                            DrivenDistance = 2000.0,
                            EngineId = new Guid("682f1317-f1d8-46c4-b7ec-13af1ee27906"),
                            GarageId = new Guid("16d31ab1-2b09-44a0-ae5e-0c1526078157"),
                            Series = "XD",
                            TransmissionId = new Guid("b5f61d07-9576-491a-a337-809a31268a17")
                        },
                        new
                        {
                            Id = new Guid("4ccf808a-2db5-4d36-82f0-e6ff4a1f8b4b"),
                            Brand = "Renault",
                            DrivenDistance = 2500.0,
                            EngineId = new Guid("57677635-5723-437d-8a94-3d26f51cd0f8"),
                            GarageId = new Guid("c17a0f07-e39c-4420-a338-3f7b15a15f59"),
                            Series = "Premium",
                            TransmissionId = new Guid("e71a4b60-1ed1-4982-b900-70a76f0706a8")
                        });
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("TruckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GarageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.HasIndex("TruckId")
                        .IsUnique()
                        .HasFilter("[TruckId] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("71fb597c-02f6-4faa-909d-e25e60e8e4e7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3c42f4e8-6f4a-4085-8be6-51d18d85f13e",
                            Email = "administrator@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@MAIL.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEKq9mDyUtlpJR9nATGrwng4K2Dq/Hcgkh24FvAYCgYrv80PDz+NSSeSfZ+RB3MlF/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "AQAAAAEAACcQAAAAEAsDAnoh64EQRJuSp/erYJJi6+uo7xIRIvX1eOHTSO2sFOptGlHGtvh44I97kvixmw==",
                            Status = "roaming",
                            TwoFactorEnabled = false,
                            UserName = "administrator"
                        },
                        new
                        {
                            Id = new Guid("119ca1f9-3f45-4391-a92e-408dce588da6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62816ce2-c245-44f7-8efc-64908fb39302",
                            Email = "user@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@MAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBigPDxVcSH+wNltJLFG1rTv2EnJz4u5iwgygkOpo7X+vmERLIwKz+V4zV2L/WrvKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "AQAAAAEAACcQAAAAEJEXV/6ivH4qZFKjIw6wQW2w66M0bHJXQwRvmDDzD8dhfd+JhJktDDKhWXhQkzK45w==",
                            Status = "roaming",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TruckManagerSoftware.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TruckManagerSoftware.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckManagerSoftware.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TruckManagerSoftware.Infrastructure.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.Trailer", b =>
                {
                    b.HasOne("TruckManagerSoftware.Infrastructure.Data.Models.Garage", "Garage")
                        .WithMany("Trailers")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.Truck", b =>
                {
                    b.HasOne("TruckManagerSoftware.Infrastructure.Data.Models.Engine", "Engine")
                        .WithMany("Trucks")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TruckManagerSoftware.Infrastructure.Data.Models.Garage", "Garage")
                        .WithMany("Trucks")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TruckManagerSoftware.Infrastructure.Data.Models.Order", "Order")
                        .WithOne("Truck")
                        .HasForeignKey("TruckManagerSoftware.Infrastructure.Data.Models.Truck", "OrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TruckManagerSoftware.Infrastructure.Data.Models.Trailer", "Trailer")
                        .WithOne("Truck")
                        .HasForeignKey("TruckManagerSoftware.Infrastructure.Data.Models.Truck", "TrailerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TruckManagerSoftware.Infrastructure.Data.Models.Transmission", "Transmission")
                        .WithMany("Trucks")
                        .HasForeignKey("TransmissionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Engine");

                    b.Navigation("Garage");

                    b.Navigation("Order");

                    b.Navigation("Trailer");

                    b.Navigation("Transmission");
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.User", b =>
                {
                    b.HasOne("TruckManagerSoftware.Infrastructure.Data.Models.Garage", "Garage")
                        .WithMany("Users")
                        .HasForeignKey("GarageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TruckManagerSoftware.Infrastructure.Data.Models.Order", "Order")
                        .WithOne("User")
                        .HasForeignKey("TruckManagerSoftware.Infrastructure.Data.Models.User", "OrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TruckManagerSoftware.Infrastructure.Data.Models.Truck", "Truck")
                        .WithOne("User")
                        .HasForeignKey("TruckManagerSoftware.Infrastructure.Data.Models.User", "TruckId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Garage");

                    b.Navigation("Order");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.Engine", b =>
                {
                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.Garage", b =>
                {
                    b.Navigation("Trailers");

                    b.Navigation("Trucks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.Order", b =>
                {
                    b.Navigation("Truck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.Trailer", b =>
                {
                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.Transmission", b =>
                {
                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("TruckManagerSoftware.Infrastructure.Data.Models.Truck", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
